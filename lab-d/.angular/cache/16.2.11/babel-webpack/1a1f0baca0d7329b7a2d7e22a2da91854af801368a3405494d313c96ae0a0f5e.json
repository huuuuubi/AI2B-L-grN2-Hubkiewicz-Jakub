{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TasksService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:46525';\n  }\n  index(archived = false) {\n    const url = this.baseUrl + '/todos';\n    return this.http.get(url, {\n      params: {\n        archived: archived,\n        _sort: 'id',\n        _order: 'desc'\n      }\n    });\n  }\n  post(task) {\n    const url = this.baseUrl + '/todos';\n    return this.http.post(url, task);\n  }\n  put(task) {\n    const url = this.baseUrl + '/todos/' + task.id;\n    return this.http.put(url, task);\n  }\n  delete(task) {\n    const url = this.baseUrl + '/todos/' + task.id;\n    return this.http.delete(url);\n  }\n  static #_ = this.ɵfac = function TasksService_Factory(t) {\n    return new (t || TasksService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TasksService,\n    factory: TasksService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TasksService","constructor","http","baseUrl","index","archived","url","get","params","_sort","_order","post","task","put","id","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\GIT\\AI2B-L-grN2-Hubkiewicz-Jakub\\lab-d\\src\\app\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {Task} from \"./task\";\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TasksService {\n  readonly baseUrl = 'http://localhost:46525';\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  public index(archived = false): Observable<Task[]> {\n    const url = this.baseUrl + '/todos';\n    return this.http.get<Task[]>(url, {\n      params: {\n        archived: archived,\n        _sort: 'id',\n        _order: 'desc',\n      }\n    })\n  }\n\n  public post(task: Task): Observable<Task> {\n    const url = this.baseUrl + '/todos';\n    return this.http.post(url, task);\n  }\n\n  public put(task: Task): Observable<Task> {\n    const url = this.baseUrl + '/todos/' + task.id;\n    return this.http.put(url, task);\n  }\n\n  public delete(task: Task): Observable<any> {\n    const url = this.baseUrl + '/todos/' + task.id;\n    return this.http.delete(url);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,YAAY;EAGvBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHL,KAAAC,OAAO,GAAG,wBAAwB;EAIvC;EAEGC,KAAKA,CAACC,QAAQ,GAAG,KAAK;IAC3B,MAAMC,GAAG,GAAG,IAAI,CAACH,OAAO,GAAG,QAAQ;IACnC,OAAO,IAAI,CAACD,IAAI,CAACK,GAAG,CAASD,GAAG,EAAE;MAChCE,MAAM,EAAE;QACNH,QAAQ,EAAEA,QAAQ;QAClBI,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE;;KAEX,CAAC;EACJ;EAEOC,IAAIA,CAACC,IAAU;IACpB,MAAMN,GAAG,GAAG,IAAI,CAACH,OAAO,GAAG,QAAQ;IACnC,OAAO,IAAI,CAACD,IAAI,CAACS,IAAI,CAACL,GAAG,EAAEM,IAAI,CAAC;EAClC;EAEOC,GAAGA,CAACD,IAAU;IACnB,MAAMN,GAAG,GAAG,IAAI,CAACH,OAAO,GAAG,SAAS,GAAGS,IAAI,CAACE,EAAE;IAC9C,OAAO,IAAI,CAACZ,IAAI,CAACW,GAAG,CAACP,GAAG,EAAEM,IAAI,CAAC;EACjC;EAEOG,MAAMA,CAACH,IAAU;IACtB,MAAMN,GAAG,GAAG,IAAI,CAACH,OAAO,GAAG,SAAS,GAAGS,IAAI,CAACE,EAAE;IAC9C,OAAO,IAAI,CAACZ,IAAI,CAACa,MAAM,CAACT,GAAG,CAAC;EAC9B;EAAC,QAAAU,CAAA,G;qBA/BUhB,YAAY,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZrB,YAAY;IAAAsB,OAAA,EAAZtB,YAAY,CAAAuB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}